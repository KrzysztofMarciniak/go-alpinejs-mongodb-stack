services:
  api:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    volumes:
      - ./backend:/src
    environment:
      - MONGO_URI=mongodb://mongo:27017/appdb
    networks:
      - internal-backend
      - monitoring
    expose:
      - "8080"   # internal only API port
      - "9091"   # metrics endpoint

  nginx:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile.prod
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - default
      - internal-backend
      - monitoring

  mongo:
    image: mongo
    volumes:
      - mongo_data:/data/db
    networks:
      - internal-backend

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    expose:
      - "9090"
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter
    depends_on:
      - nginx
    networks:
      - monitoring
    expose:
      - "9113"      
    command:
      - "-nginx.scrape-uri=http://nginx:80/nginx_status"
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - default
      - monitoring

volumes:
  mongo_data:
  grafana_data:

networks:
  default:
    driver: bridge

  internal-backend:
    driver: bridge
    internal: true

  monitoring:
    driver: bridge
    internal: true
